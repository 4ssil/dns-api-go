// Code generated by go-bindata.
// sources:
// data/favicon.ico
// data/humans.txt
// data/index.html
// data/robots.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataFaviconIco = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x62\x60\x60\x64\x60\x64\x10\x10\x60\x62\x00\x81\x0d\x0c\x0c\x0c\x62\x0c\x0c\x0c\x1a\x0c\x0c\x0c\x02\x0c\x0c\x0c\x0a\x0c\x10\x79\x10\x70\x60\x40\x00\x26\x24\x76\xb0\xbe\x00\x9c\xfd\xaf\x1e\x81\x3f\xf0\x63\xc7\xc8\x6a\x60\xe0\xff\x7f\x08\x66\x6c\x40\x60\xfe\x0f\xd8\x31\xb2\x1a\x98\x3e\x40\x00\x00\x00\xff\xff\xfd\xf4\xae\x2d\xc6\x00\x00\x00"

func dataFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_dataFaviconIco,
		"data/favicon.ico",
	)
}

func dataFaviconIco() (*asset, error) {
	bytes, err := dataFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/favicon.ico", size: 198, mode: os.FileMode(420), modTime: time.Unix(1522299752, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHumansTxt = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xc8\xb1\x0a\xc2\x40\x0c\x00\xd0\xf9\xf2\x15\x99\x8b\xb4\xfb\x4d\x4a\xb1\x08\xe2\x64\x37\x11\x39\x34\x6a\x68\x9a\xc8\x25\xd5\xdf\x17\x74\x7b\xbc\xae\xc1\x71\xbb\x39\x60\xd3\x41\xea\x9f\x74\xcf\xc7\xa0\x37\xe1\x9e\xe6\x17\xa4\xde\x34\xca\x35\x32\xfa\x2f\x4f\x25\xce\x7f\xb6\x56\x1f\xed\x32\x41\x1a\x3f\x1c\x41\x35\xe3\xda\xc3\x84\xf4\xe2\xb6\x88\x43\x1a\xaa\xcd\x79\x47\xe2\xac\x13\xaf\x70\x60\x95\xa2\x37\xf8\x06\x00\x00\xff\xff\xab\x04\x27\x53\x6e\x00\x00\x00"

func dataHumansTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHumansTxt,
		"data/humans.txt",
	)
}

func dataHumansTxt() (*asset, error) {
	bytes, err := dataHumansTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/humans.txt", size: 110, mode: os.FileMode(420), modTime: time.Unix(1522299752, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xdf\x53\xe3\x38\x12\x7e\xdf\xbf\xa2\xcf\x33\xb5\x2f\x87\x6d\x08\xec\x32\x80\xe3\xaa\x2c\xec\x02\xf3\x83\xe1\x48\x76\x76\xe6\x5e\xae\x64\xa9\x13\x2b\x91\x25\x8f\x24\xc7\xf1\x4d\xcd\xff\x7e\x25\xd9\x09\x49\x08\x73\x70\x7b\xb5\x57\xb5\x07\x0f\xb6\x64\x75\xab\xfb\xd3\xa7\x4f\xad\x24\x7f\xb9\x78\x7f\x3e\xfa\x74\xfb\x33\xe4\xb6\x10\xe9\x77\x89\x7b\x80\x20\x72\xd2\x0f\x50\x06\xe9\x77\x00\x49\x8e\x84\xb9\x17\x80\xa4\x40\x4b\x80\xe6\x44\x1b\xb4\xfd\xa0\xb2\xe3\xf0\x55\x10\x77\xdf\x04\x97\x33\xd0\x28\xfa\x01\xa9\x6c\xae\x74\x00\xb9\xc6\x71\x3f\x88\xf3\xaa\x20\xd2\x44\x76\x61\x03\x88\xd7\x1d\x49\x52\x60\x3f\x60\x68\xa8\xe6\xa5\xe5\x4a\x06\x40\x95\xb4\x28\x6d\x3f\x18\xdc\x5e\xc3\x58\x69\xb8\xb8\x19\x82\x50\x6a\x56\x95\x66\xa7\xf5\x0c\x9b\x5a\x69\x66\xd6\x4c\x99\x34\x7b\x30\x35\x4a\xee\x01\x29\xf9\xbd\x95\xe5\x56\x60\xfa\xe5\x4b\x74\xa5\x8c\x75\xd6\x5f\xbf\x42\x08\x03\x09\x4a\x0a\x2e\x71\x6d\x2a\x30\xa8\xe7\x9c\x62\x12\xb7\x36\x0f\x66\x9d\x73\xac\x4b\xa5\xed\xda\xac\x35\x67\x36\xef\x33\x74\x76\xa1\x6f\xec\x01\x97\xdc\x72\x22\x42\x43\x89\xc0\xfe\x41\xb0\x8e\x54\x0b\x4e\x6e\x6d\x69\x4e\xe3\xb8\x20\x0b\xca\x64\x94\x29\x65\x8d\xd5\xa4\x74\x0d\xaa\x8a\x78\xd5\x11\x1f\x46\x87\xd1\x71\x4c\x8d\xb9\xef\x8b\x0a\x2e\x23\x6a\x4c\xd0\xc2\x6e\x6c\x23\xd0\xe4\x88\x36\x00\x2e\x2d\x4e\x34\xb7\x4d\x3f\x30\x39\x39\x7c\x75\x14\xfe\xf4\xe1\x13\xe7\xc3\xeb\x5f\xf0\xcd\x01\xbb\x2c\x5e\xdf\x0d\x66\x0d\xad\xae\x06\x57\x77\x93\xc3\xde\xfb\xe2\x57\x5a\xd7\xc7\x4a\x1e\xde\x7d\x62\x93\xa3\x0f\xe4\xaf\xb7\xc5\x70\x64\xfe\x19\xbf\xf9\xf1\xd5\x3c\x63\x3f\x4f\xf3\xa3\x2a\x00\xaa\x95\x31\x4a\xf3\x09\x97\xfd\x80\x48\x25\x9b\x42\x55\x66\x99\x54\xbb\x88\x60\x34\xed\x07\x71\x4c\x15\xc3\x68\xfa\xb9\x42\xdd\xf8\x3c\xda\xd7\xf0\x20\x3a\xe8\x45\x47\x3e\xee\xa9\x09\xd2\x24\x6e\xad\x76\xb8\x78\x2e\x30\xd3\x6d\x5c\xa6\x66\x17\x0a\x23\xfa\xc3\xf5\xdf\x78\xb6\xdf\x3b\xfe\x3c\x6f\xa6\xc3\x77\xe3\xab\xe9\xfb\x77\xe4\xed\x6c\x5c\xfd\xf6\x61\xf1\xf7\xc5\xaf\xb7\xf2\xfc\xf5\xe0\x58\xf4\x8a\xf3\xdf\x6e\xae\xcb\xcb\x93\xe2\xf2\xfc\xe2\x55\x7d\x79\x73\x4d\x6f\x2f\x8e\x47\x0b\xf2\x38\x0a\xdb\xb9\xb8\xc5\x00\xdb\x94\xd8\x0f\x2c\x2e\xac\x5b\xb9\x0e\x2a\xbf\xd5\xe0\x4b\xfb\x0e\x90\x11\x3a\x9b\x68\x55\x49\x16\x52\x25\x94\x3e\x7d\x31\x3e\x71\xff\x67\xed\x80\xaf\xed\x23\x32\x16\xe7\x18\x8e\x95\xb2\xa8\xef\x8d\x4b\xc2\x18\x97\x93\x53\x38\xda\x2f\x17\xb0\x7f\xb6\xec\x6f\x3d\xc1\x8b\x93\x93\x93\xb3\x47\x27\x82\xcd\x99\x00\x32\xa5\x19\xea\xd0\xaa\xf2\x14\x7a\xe5\x02\x8c\x12\x9c\xc1\x0b\x3c\x71\xff\xdf\x8a\x27\x92\x64\x1e\x3a\x9d\x58\x8f\xad\x9b\x24\x13\x84\xce\x56\x53\x8c\x95\xb4\x61\x8d\x7c\x92\xdb\x53\xc8\x94\x60\x1b\x6e\x93\xd8\xe3\xe6\x65\x27\x5e\xea\x4e\x92\x29\xd6\x74\xb0\x4a\x32\x07\x2a\x88\x31\xd0\x87\x40\x92\x79\x46\x34\xb4\x8f\x90\xcb\x39\x6a\x83\xcb\x26\xc3\x31\xa9\x84\x0d\x40\x2b\x81\xdd\x68\x3e\x21\xad\xcc\xf8\x59\xfa\x41\x87\x5e\x28\x70\x6c\x4f\x7f\xd8\x2f\x17\x67\x4b\x40\x43\xed\x23\xf4\x7d\xcb\x65\x83\x84\xf1\x6e\xf6\x7e\x37\x77\x97\xf3\x6a\x84\x53\xcb\x83\x34\x21\x4b\xe9\x0b\x36\xe5\x26\x89\x49\x0a\x21\x24\xa6\x20\x42\xa4\xdf\x52\x9e\x28\x89\xdb\x41\x49\x9c\x1f\xac\xe6\x8f\x19\x9f\x77\x40\xc4\x92\x2c\x5f\xd7\xa2\x72\x6a\x44\xb8\x5c\x8b\xc8\xc5\xe3\xdc\xbf\x6d\xdd\x0f\x97\xc2\xb6\xe6\x75\x97\x7d\x38\x16\x15\x67\xeb\x79\xad\x8d\xd2\xaa\x5e\xfb\xb2\xed\x41\x84\xa6\x08\x0f\xdc\xea\x87\x05\x0b\x0f\x36\x47\xde\x67\xf0\xb8\xe9\xbd\xed\xa6\x31\x40\x52\xa6\xa3\x9c\x9b\x25\x48\x40\x84\x50\xb5\x81\x46\x55\x60\x15\x94\xa8\xc7\x4a\x17\x0e\xcd\xb0\x3b\x32\x60\xce\x09\x18\x5e\x94\x02\xe1\x6a\x34\xba\x05\x8d\x9f\x2b\x34\xd6\xec\x81\x46\x8a\x7c\xce\xe5\xc4\x99\x6b\xd0\x68\x2a\x61\x8d\xdf\x24\x40\x0c\xbc\x1e\xbe\xbf\x09\x51\x3a\x1d\x63\xa0\xb2\x29\x52\x6b\xa2\x24\x2e\x77\x04\x84\x50\x28\x63\x21\x23\x86\x53\xa8\x0c\x99\x20\xe0\x82\xf8\x39\x6b\x55\x09\xe6\x97\x16\x04\x9f\x21\xd8\x9c\x9b\xd3\x2d\x2f\x5b\x98\x6c\x37\xff\x43\xdc\x7b\xbf\x07\xf7\xfd\x87\xb8\x27\x0e\x89\xcd\x5e\xf7\xf7\x12\x68\xa5\x05\x2c\xd5\x7a\x83\xed\xf1\x4b\x27\x7f\xf1\xcb\x5c\x19\xbb\xe9\xce\x1f\x0f\xe9\x1f\x82\xc3\x7f\x9d\x7f\x0a\x18\x37\x54\xcd\x51\x43\x9d\x73\x9a\x83\x4b\xcf\x40\x4e\x24\x13\x08\x58\x10\x2e\x7c\xe1\x62\x73\x84\x16\xb4\x89\xeb\x73\x87\x56\x97\x37\x30\x55\x10\x2e\x3d\x6d\xa9\x27\x48\x41\x3c\x37\x10\xc6\xca\x31\xda\x91\xb2\x23\xea\x9f\x91\x2c\x2b\x79\xdc\xcd\x9a\x77\x1f\xe3\x15\x62\x41\xfa\xef\xc7\x38\x51\xfd\xd3\xd0\xeb\xfa\x76\xfe\xe3\xb2\xde\x85\x5a\xe9\x99\x93\x12\x6a\x45\xe3\x34\xc9\x11\xa6\x55\x14\x5c\x94\x48\xed\x9e\xeb\x64\x0a\x8d\xe7\x4e\x77\x80\xa8\x31\x8c\x3e\x8e\x56\x7a\x66\x95\xfa\x3f\xe4\xd0\x60\x30\x18\xc4\x4c\x9a\x90\x94\x3c\x52\x7a\xf2\x18\x8f\xb6\xc7\x3d\x91\x4b\xbf\x3f\xc0\xd1\xc7\x51\xec\x2b\xa8\x68\xcc\x1f\x0b\x6e\x7d\xcc\xf3\x48\xbe\xde\x93\xf7\xd2\x3b\x62\x31\x7c\xcb\x0b\x6e\x9d\xb2\x7c\x4f\x8a\xf2\x0c\x06\x59\x65\x30\xbc\xd5\xca\x22\x75\x35\x51\x12\xe7\xbd\xc7\xd6\x6b\x9b\x06\xcf\xd9\x12\x3b\xa8\xf0\xdc\x6d\xe1\xd1\x3e\x17\x1c\xa5\x35\x40\x34\x82\x70\xa9\x20\x73\x67\x7e\x6f\x7f\x7f\xb5\x5d\x4a\xd4\x90\xab\x4a\xef\x01\x91\x0c\x68\x67\x50\xe7\xca\x1b\x91\xac\x32\x7c\x8e\xa0\x34\x28\x9b\xa3\xae\xb9\x41\x98\x68\x44\xd6\x40\xcd\x85\x80\x0c\x21\x13\x8a\xce\x90\x41\xcd\x6d\x0e\x52\x81\x54\xb6\xad\xc5\xca\x1d\x11\x5d\x8f\xfd\x86\x4c\xb2\x54\xa3\x68\x92\x38\x4b\xa1\x2a\x95\xf4\x67\xfc\xaa\x42\xb1\x39\x69\x85\xde\xe4\x7e\xe3\x52\x25\x0d\x77\x55\xf2\x03\x7e\x4c\xb8\xcd\xab\xcc\xdf\x6d\xcc\x6c\xb1\x49\x5e\x2e\x8d\x25\x42\xac\x8a\x15\x55\x4b\xf0\x7d\xd2\x95\x72\x24\xf5\x42\xe0\xe7\xe5\xc6\x05\x24\x95\xf5\xf1\x10\xa0\xaa\x28\x50\x53\x4e\xc4\x2a\x24\x9f\x1c\x91\x0d\x4c\x2a\xa2\x89\xb4\x88\x4e\x33\xc8\x9c\x70\x41\x32\x2e\xb8\x6d\x5c\x71\x24\xf8\xaa\xa1\x34\x10\x4a\x2b\x4d\x68\xb3\xa3\x02\x7a\xb0\xd1\xbf\xa1\x2e\x1b\x05\xec\xfd\x6b\x99\x7e\x2f\x33\x53\x9e\x39\xe7\x4f\x6c\xb4\x86\xdd\xed\x83\xb3\x7e\xd0\xbe\x06\x4b\x56\xad\xdf\x4e\x76\xd6\xef\x0f\x2b\xe5\x87\xb4\x2c\x58\x78\x18\x3c\x49\x28\x77\x8c\x06\x48\x2a\xb1\x76\x5b\x80\xed\x6d\x21\xf8\xda\xd7\xd5\x45\xe2\x0e\x05\x71\xdc\xee\x0a\x75\x93\xc4\x82\x3f\x30\x4c\x1f\xb0\x87\xe5\xb4\x8c\xb8\x8a\x83\xf4\x17\x62\xac\xdf\x00\x77\x7e\x0d\x05\xc2\x45\x23\x49\xc1\x69\x78\x71\x33\xdc\x21\x23\x4f\x73\xdf\xb1\xd1\xb1\x33\x48\x2f\xb9\x0d\x33\x62\x90\xf9\x52\xdb\x29\x16\x97\xbb\xa4\x73\xd3\x75\x12\x57\xe2\x0f\x06\x73\xe0\x7f\x88\x82\xb7\x5c\xce\x9e\x0a\x64\x26\xd4\x24\x5a\xaa\x6e\x1c\xa4\x3f\x09\xe5\x53\x7b\xa2\xb9\xad\xb9\xb5\xa8\x3d\x50\x43\xab\x04\xca\x7f\x0c\x55\x25\x4c\x90\x8e\xda\x2f\xbb\x7c\xfd\x0f\x90\x39\x57\x65\xe3\xaf\xb8\x4f\xcc\xab\x45\x64\x86\x45\xe9\x0f\xac\xa1\x6b\xc2\x1b\x2c\xca\x67\xe6\xb3\xa1\x00\xed\xf6\x6c\x2f\xfb\xed\x1d\x3f\x89\xdb\x9f\x21\xff\x15\x00\x00\xff\xff\x13\xe6\xcc\xb3\x97\x14\x00\x00"

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 5271, mode: os.FileMode(420), modTime: time.Unix(1522300147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataRobotsTxt = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x2d\x4e\x2d\xd2\x4d\x4c\x4f\xcd\x2b\xb1\x52\xd0\xe2\x72\x2e\x4a\x2c\xcf\xd1\x4d\x49\xcd\x49\xac\xb4\x52\x30\x34\xe0\x72\xc9\x2c\x4e\xcc\xc9\xc9\x2f\xb7\x52\xd0\x4f\x4e\xcf\xd4\x4d\xca\xcc\xd3\xd7\xc2\x26\xc8\x05\x08\x00\x00\xff\xff\xab\x8f\x53\x86\x47\x00\x00\x00"

func dataRobotsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataRobotsTxt,
		"data/robots.txt",
	)
}

func dataRobotsTxt() (*asset, error) {
	bytes, err := dataRobotsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/robots.txt", size: 71, mode: os.FileMode(420), modTime: time.Unix(1522299752, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/favicon.ico": dataFaviconIco,
	"data/humans.txt":  dataHumansTxt,
	"data/index.html":  dataIndexHtml,
	"data/robots.txt":  dataRobotsTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{dataFaviconIco, map[string]*bintree{}},
		"humans.txt":  &bintree{dataHumansTxt, map[string]*bintree{}},
		"index.html":  &bintree{dataIndexHtml, map[string]*bintree{}},
		"robots.txt":  &bintree{dataRobotsTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
