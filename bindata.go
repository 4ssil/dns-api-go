// Code generated by go-bindata.
// sources:
// data/favicon.ico
// data/humans.txt
// data/index.html
// data/robots.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataFaviconIco = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x62\x60\x60\x64\x60\x64\x10\x10\x60\x62\x00\x81\x0d\x0c\x0c\x0c\x62\x0c\x0c\x0c\x1a\x0c\x0c\x0c\x02\x0c\x0c\x0c\x0a\x0c\x10\x79\x10\x70\x60\x40\x00\x26\x24\x76\xb0\xbe\x00\x9c\xfd\xaf\x1e\x81\x3f\xf0\x63\xc7\xc8\x6a\x60\xe0\xff\x7f\x08\x66\x6c\x40\x60\xfe\x0f\xd8\x31\xb2\x1a\x98\x3e\x40\x00\x00\x00\xff\xff\xfd\xf4\xae\x2d\xc6\x00\x00\x00"

func dataFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_dataFaviconIco,
		"data/favicon.ico",
	)
}

func dataFaviconIco() (*asset, error) {
	bytes, err := dataFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/favicon.ico", size: 198, mode: os.FileMode(420), modTime: time.Unix(1522301535, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHumansTxt = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xc8\xb1\x0a\xc2\x40\x0c\x00\xd0\xf9\xf2\x15\x99\x8b\xb4\xfb\x4d\x4a\xb1\x08\xe2\x64\x37\x11\x39\x34\x6a\x68\x9a\xc8\x25\xd5\xdf\x17\x74\x7b\xbc\xae\xc1\x71\xbb\x39\x60\xd3\x41\xea\x9f\x74\xcf\xc7\xa0\x37\xe1\x9e\xe6\x17\xa4\xde\x34\xca\x35\x32\xfa\x2f\x4f\x25\xce\x7f\xb6\x56\x1f\xed\x32\x41\x1a\x3f\x1c\x41\x35\xe3\xda\xc3\x84\xf4\xe2\xb6\x88\x43\x1a\xaa\xcd\x79\x47\xe2\xac\x13\xaf\x70\x60\x95\xa2\x37\xf8\x06\x00\x00\xff\xff\xab\x04\x27\x53\x6e\x00\x00\x00"

func dataHumansTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHumansTxt,
		"data/humans.txt",
	)
}

func dataHumansTxt() (*asset, error) {
	bytes, err := dataHumansTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/humans.txt", size: 110, mode: os.FileMode(420), modTime: time.Unix(1522301535, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x6d\x73\xdb\xb8\x11\xfe\x7e\xbf\x62\xcb\x64\xee\x4b\x4d\xd2\x2f\xb9\x4b\x6c\x53\x9c\xd1\xd9\x77\xb1\xf3\xe2\xb8\x96\x2e\x97\xf4\x4b\x07\x04\x56\x22\x2c\x10\xcb\x00\xa0\x5e\xea\xc9\x7f\xef\x00\xa4\x64\xc9\x96\x53\xbb\xd7\xb9\xce\x5c\xed\x0f\x22\x40\xec\x62\xf7\xc1\x83\x07\x0b\x66\x7f\x39\xfd\x70\x32\xfc\x7c\xf9\x33\x94\xae\x52\xf9\x77\x99\xff\x01\xc5\xf4\xb8\x17\xa1\x8e\xf2\xef\x00\xb2\x12\x99\xf0\x0f\x00\x59\x85\x8e\x01\x2f\x99\xb1\xe8\x7a\x51\xe3\x46\xf1\xab\x28\xed\xde\x29\xa9\x27\x60\x50\xf5\x22\xd6\xb8\x92\x4c\x04\xa5\xc1\x51\x2f\x4a\xcb\xa6\x62\xda\x26\x6e\xee\x22\x48\xd7\x1d\x69\x56\x61\x2f\x12\x68\xb9\x91\xb5\x93\xa4\x23\xe0\xa4\x1d\x6a\xd7\x8b\xfa\x97\xe7\x30\x22\x03\xa7\x17\x03\x50\x44\x93\xa6\xb6\x5b\xad\x27\xb8\x98\x91\x11\x76\xcd\x54\x68\xbb\x03\xd7\x96\xf4\x0e\xb0\x5a\xde\x5a\x39\xe9\x14\xe6\x37\x37\xc9\x19\x59\xe7\xad\xbf\x7e\x85\x18\xfa\x1a\x48\x2b\xa9\x71\x6d\x2a\xb0\x68\xa6\x92\x63\x96\xb6\x36\xf7\x66\x9d\x4a\x9c\xd5\x64\xdc\xda\xac\x33\x29\x5c\xd9\x13\xe8\xed\xe2\xd0\xd8\x01\xa9\xa5\x93\x4c\xc5\x96\x33\x85\xbd\xbd\x68\x1d\xa9\x16\x9c\xd2\xb9\xda\x1e\xa5\x69\xc5\xe6\x5c\xe8\xa4\x20\x72\xd6\x19\x56\xfb\x06\xa7\x2a\x5d\x75\xa4\x07\xc9\x41\xf2\x32\xe5\xd6\xde\xf6\x25\x95\xd4\x09\xb7\x36\x6a\x61\xb7\x6e\xa1\xd0\x96\x88\x2e\x02\xa9\x1d\x8e\x8d\x74\x8b\x5e\x64\x4b\x76\xf0\xea\x45\xfc\xd3\xc7\xcf\x52\x0e\xce\x7f\xc1\xb7\x7b\xe2\x75\xf5\xe6\xaa\x3f\x59\xf0\xe6\xac\x7f\x76\x35\x3e\xd8\xff\x50\xfd\xca\x67\xb3\x97\xa4\x0f\xae\x3e\x8b\xf1\x8b\x8f\xec\xaf\x97\xd5\x60\x68\xff\x99\xbe\xfd\xf1\xd5\xb4\x10\x3f\x5f\x97\x2f\x9a\x08\xb8\x21\x6b\xc9\xc8\xb1\xd4\xbd\x88\x69\xd2\x8b\x8a\x1a\xbb\x4c\xaa\x5d\x44\xb0\x86\xf7\xa2\x34\xe5\x24\x30\xb9\xfe\xd2\xa0\x59\x84\x3c\xda\xc7\x78\x2f\xd9\xdb\x4f\x5e\x84\xb8\xaf\x6d\x94\x67\x69\x6b\xb5\xc5\xc5\x53\x81\xb9\xbe\x8b\xcb\xb5\xdd\x86\xc2\x90\xff\x70\xfe\x37\x59\xec\xee\xbf\xfc\x32\x5d\x5c\x0f\xde\x8f\xce\xae\x3f\xbc\x67\xef\x26\xa3\xe6\xb7\x8f\xf3\xbf\xcf\x7f\xbd\xd4\x27\x6f\xfa\x2f\xd5\x7e\x75\xf2\xdb\xc5\x79\xfd\xfa\xb0\x7a\x7d\x72\xfa\x6a\xf6\xfa\xe2\x9c\x5f\x9e\xbe\x1c\xce\xd9\xc3\x28\xdc\xcd\xc5\x2f\x06\xb8\x45\x8d\xbd\xc8\xe1\xdc\xf9\x95\xeb\xa0\x0a\x5b\x0d\x6e\xda\x67\x80\x82\xf1\xc9\xd8\x50\xa3\x45\xcc\x49\x91\x39\x7a\x36\x3a\xf4\xff\xc7\xed\x80\xaf\xed\x4f\x62\x1d\x4e\x31\x1e\x11\x39\x34\xb7\xc6\x35\x13\x42\xea\xf1\x11\xbc\xd8\xad\xe7\xb0\x7b\xbc\xec\x6f\x3d\xc1\xb3\xc3\xc3\xc3\xe3\x07\x27\x82\xcd\x99\x00\x0a\x32\x02\x4d\xec\xa8\x3e\x82\xfd\x7a\x0e\x96\x94\x14\xf0\x0c\x0f\xfd\xff\xb7\xe2\x49\x34\x9b\xc6\x5e\x27\xd6\x63\xeb\x26\x29\x14\xe3\x93\xd5\x14\x23\xd2\x2e\x9e\xa1\x1c\x97\xee\x08\x0a\x52\x62\xc3\x6d\x96\x06\xdc\x82\xec\xa4\x4b\xdd\xc9\x0a\x12\x8b\x0e\x56\xcd\xa6\xc0\x15\xb3\x16\x7a\x10\x69\x36\x2d\x98\x81\xf6\x27\x96\x7a\x8a\xc6\xe2\xb2\x29\x70\xc4\x1a\xe5\x22\x30\xa4\xb0\x1b\x2d\xc7\xac\x95\x99\x30\x4b\x2f\xea\xd0\x8b\x15\x8e\xdc\xd1\x0f\xbb\xf5\xfc\x78\x09\x68\x6c\x42\x84\xa1\x6f\xb9\x6c\x90\x09\xd9\xcd\xde\xeb\xe6\xee\x72\x5e\x8d\xf0\x6a\xb9\x97\x67\x6c\x29\x7d\xd1\xa6\xdc\x64\x29\xcb\x21\x86\xcc\x56\x4c\xa9\xfc\x5b\xca\x93\x64\x69\x3b\x28\x4b\xcb\xbd\xd5\xfc\xa9\x90\xd3\x0e\x88\x54\xb3\xe5\xe3\x5a\x54\x5e\x8d\x98\xd4\x6b\x11\xf9\x78\xbc\xfb\x77\xad\xfb\xc1\x52\xd8\xd6\xbc\x6e\xb3\x8f\x47\xaa\x91\x62\x3d\xaf\xb5\x51\x86\x66\x6b\x6f\xee\x7a\x50\xb1\xad\xe2\x3d\xbf\xfa\x71\x25\xe2\xbd\xcd\x91\xb7\x19\x3c\x6c\x7a\x6b\xbb\x69\x0c\x90\xd5\xf9\xb0\x94\x76\x09\x12\x30\xa5\x68\x66\x61\x41\x0d\x38\x82\x1a\xcd\x88\x4c\xe5\xd1\x8c\xbb\x23\x03\xa6\x92\x81\x95\x55\xad\x10\xce\x86\xc3\x4b\x30\xf8\xa5\x41\xeb\xec\x0e\x18\xe4\x28\xa7\x52\x8f\xbd\xb9\x01\x83\xb6\x51\xce\x86\x4d\x02\xcc\xc2\x9b\xc1\x87\x8b\x18\xb5\xd7\x31\x01\x54\x5c\x23\x77\x36\xc9\xd2\x7a\x4b\x40\x08\x15\x59\x07\x05\xb3\x92\x43\x63\xd9\x18\x01\xe7\x2c\xcc\x39\xa3\x46\x89\xb0\xb4\xa0\xe4\x04\xc1\x95\xd2\x1e\xdd\xf1\x72\x07\x93\xbb\xcd\xff\x10\xf7\xfd\xdf\x83\xfb\xee\x7d\xdc\x33\x8f\xc4\x66\xaf\xff\x7b\x0e\xbc\x31\x0a\x96\x6a\xbd\xc1\xf6\xf4\xb9\x97\xbf\xf4\x79\x49\xd6\x6d\xba\x0b\xc7\x43\xfe\x87\xe0\xf0\x5f\xe7\x1f\x81\x90\x96\xd3\x14\x0d\xcc\x4a\xc9\x4b\xf0\xe9\x59\x28\x99\x16\x0a\x01\x2b\x26\x55\x28\x5c\x5c\x89\xd0\x82\x36\xf6\x7d\xfe\xd0\xea\xf2\x06\x41\x15\x93\x3a\xd0\x96\x07\x82\x54\x2c\x70\x03\x61\x44\x9e\xd1\x9e\x94\x1d\x51\xff\x8c\x64\x59\xc9\xe3\x76\xd6\xbc\xff\x94\xae\x10\x8b\xf2\x7f\x3f\xc6\x8b\xea\x9f\x86\x5e\xe7\x97\xd3\x1f\x97\xf5\x2e\xcc\xc8\x4c\xbc\x94\x70\xa7\x16\x5e\x93\x3c\x61\x5a\x45\xc1\x79\x8d\xdc\xed\xf8\x4e\x41\x68\x03\x77\xba\x03\x84\x46\x30\xfc\x34\x5c\xe9\x99\x23\xfa\x3f\xe4\x50\xbf\xdf\xef\xa7\x42\xdb\x98\xd5\x32\x21\x33\x7e\x88\x47\x77\xc7\x3d\x92\x4b\xbf\x3f\xc0\xe1\xa7\x61\x1a\x2a\xa8\x64\x24\x1f\x0a\x6e\x7d\xcc\xd3\x48\xbe\xde\x53\xee\xe7\x57\xcc\x61\xfc\x4e\x56\xd2\x79\x65\xf9\x9e\x55\xf5\x31\xf4\x8b\xc6\x62\x7c\x69\xc8\x21\xf7\x35\x51\x96\x96\xfb\x0f\xad\xd7\x5d\x1a\x3c\x65\x4b\x6c\xa1\xc2\x53\xb7\x45\x40\xfb\x44\x49\xd4\xce\x02\x33\x08\xca\xa7\x82\xc2\x9f\xf9\xfb\xbb\xbb\xab\xed\x52\xa3\x81\x92\x1a\xb3\x03\x4c\x0b\xe0\x9d\xc1\xac\xa4\x60\xc4\x8a\xc6\xca\x29\x02\x19\x20\x57\xa2\x99\x49\x8b\x30\x36\x88\x62\x01\x33\xa9\x14\x14\x08\x85\x22\x3e\x41\x01\x33\xe9\x4a\xd0\x04\x9a\x5c\x5b\x8b\xd5\x5b\x22\x3a\x1f\x85\x0d\x99\x15\xb9\x41\xb5\xc8\xd2\x22\x87\xa6\x26\x1d\xce\xf8\x55\x85\xe2\x4a\xd6\x0a\xbd\x2d\xc3\xc6\xe5\xa4\xad\xf4\x55\xf2\x3d\x7e\x8c\xa5\x2b\x9b\x22\xdc\x6d\xec\x64\xbe\x24\x65\x3c\xa6\x28\x97\xda\x3a\xa6\xd4\xaa\x56\xa1\x99\x86\xd0\xa7\x7d\x25\xc7\xf2\xa0\x03\x61\x5a\x69\x7d\x3c\x9a\x5c\x08\x87\x01\xa7\xaa\x42\xc3\x25\x53\xab\x88\x42\x6e\x4c\x2f\x60\xdc\x30\xc3\xb4\x43\xf4\x92\xc1\xa6\x4c\x2a\x56\x48\x25\xdd\xc2\xd7\x46\x4a\xae\x1a\x64\x80\x71\xde\x18\xc6\x17\x0f\x20\x11\x6a\xb2\x2e\xc8\x50\x60\xfb\x38\x4c\xa3\xb5\x8f\xb8\xdd\x26\xb7\xe9\xc0\xcd\x4d\xf2\x11\x8d\x95\xa4\x7d\x41\x1c\xde\x6e\x29\xac\xee\xe9\xc7\x37\x44\x6b\xa3\x2e\xbe\x7d\xac\xf3\xef\x75\x61\xeb\x63\xef\xfc\x91\x8d\xd6\xb0\xbb\xd4\x48\xd1\x8b\xda\xc7\x68\x49\xd6\xf5\x4b\xcf\xd6\x6b\xc1\xfd\x02\xfc\x3e\xdb\x2b\x11\x1f\x44\x8f\xd2\xdf\x2d\xa3\x01\xb2\x46\xad\x5d\x42\xe0\xee\x6e\x53\x72\xed\xed\xea\x7e\x72\x85\x8a\xf9\x2d\xd3\xd5\xff\x36\x4b\x95\xbc\x67\x98\xdf\x23\xa5\x28\x79\x9d\x48\x4a\xa3\xfc\x17\x66\x5d\xd8\x57\x57\x81\x1b\x0a\xe1\x74\xa1\x59\x25\x79\x7c\x7a\x31\xd8\xa2\x4e\x8f\x73\xdf\x29\xaf\x27\x7d\x94\xbf\x96\x2e\x2e\x98\x45\x11\x2a\x78\x2f\x84\x52\x6f\x53\xe4\x4d\xd7\x59\xda\xa8\x3f\x18\xcc\x7e\xf8\xbe\x05\xef\xa4\x9e\x3c\x16\xc8\x42\xd1\x38\x59\x8a\x79\x1a\xe5\x3f\x29\x0a\xa9\x3d\xd2\xdc\xcd\xa4\x73\x68\x02\x50\x03\x47\x0a\xf5\x3f\x06\xd4\x28\x1b\xe5\xc3\xf6\xcd\x36\x5f\xff\x03\x64\x4e\xa8\x5e\x84\x9b\xf3\x23\xf3\x6a\x11\x99\x60\x55\x87\x73\x70\xe0\x9b\xf0\x16\xab\xfa\x89\xf9\x6c\x28\x40\xbb\x3d\xdb\x6f\x08\xed\xa7\x83\x2c\x6d\xbf\x6e\xfe\x2b\x00\x00\xff\xff\xa4\x03\x36\x4b\xee\x14\x00\x00"

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 5358, mode: os.FileMode(420), modTime: time.Unix(1522307705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataRobotsTxt = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x2d\x4e\x2d\xd2\x4d\x4c\x4f\xcd\x2b\xb1\x52\xd0\xe2\x72\x2e\x4a\x2c\xcf\xd1\x4d\x49\xcd\x49\xac\xb4\x52\x30\x34\xe0\x72\xc9\x2c\x4e\xcc\xc9\xc9\x2f\xb7\x52\xd0\x4f\x4e\xcf\xd4\x4d\xca\xcc\xd3\xd7\xc2\x26\xc8\x05\x08\x00\x00\xff\xff\xab\x8f\x53\x86\x47\x00\x00\x00"

func dataRobotsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataRobotsTxt,
		"data/robots.txt",
	)
}

func dataRobotsTxt() (*asset, error) {
	bytes, err := dataRobotsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/robots.txt", size: 71, mode: os.FileMode(420), modTime: time.Unix(1522301535, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/favicon.ico": dataFaviconIco,
	"data/humans.txt":  dataHumansTxt,
	"data/index.html":  dataIndexHtml,
	"data/robots.txt":  dataRobotsTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{dataFaviconIco, map[string]*bintree{}},
		"humans.txt":  &bintree{dataHumansTxt, map[string]*bintree{}},
		"index.html":  &bintree{dataIndexHtml, map[string]*bintree{}},
		"robots.txt":  &bintree{dataRobotsTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
