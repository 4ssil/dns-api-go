// Code generated by go-bindata.
// sources:
// data/favicon.ico
// data/humans.txt
// data/index.html
// data/robots.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataFaviconIco = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x62\x60\x60\x64\x60\x64\x10\x10\x60\x62\x00\x81\x0d\x0c\x0c\x0c\x62\x0c\x0c\x0c\x1a\x0c\x0c\x0c\x02\x0c\x0c\x0c\x0a\x0c\x10\x79\x10\x70\x60\x40\x00\x26\x24\x76\xb0\xbe\x00\x9c\xfd\xaf\x1e\x81\x3f\xf0\x63\xc7\xc8\x6a\x60\xe0\xff\x7f\x08\x66\x6c\x40\x60\xfe\x0f\xd8\x31\xb2\x1a\x98\x3e\x40\x00\x00\x00\xff\xff\xfd\xf4\xae\x2d\xc6\x00\x00\x00"

func dataFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_dataFaviconIco,
		"data/favicon.ico",
	)
}

func dataFaviconIco() (*asset, error) {
	bytes, err := dataFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/favicon.ico", size: 198, mode: os.FileMode(420), modTime: time.Unix(1522301535, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHumansTxt = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xc8\xb1\x0a\xc2\x40\x0c\x00\xd0\xf9\xf2\x15\x99\x8b\xb4\xfb\x4d\x4a\xb1\x08\xe2\x64\x37\x11\x39\x34\x6a\x68\x9a\xc8\x25\xd5\xdf\x17\x74\x7b\xbc\xae\xc1\x71\xbb\x39\x60\xd3\x41\xea\x9f\x74\xcf\xc7\xa0\x37\xe1\x9e\xe6\x17\xa4\xde\x34\xca\x35\x32\xfa\x2f\x4f\x25\xce\x7f\xb6\x56\x1f\xed\x32\x41\x1a\x3f\x1c\x41\x35\xe3\xda\xc3\x84\xf4\xe2\xb6\x88\x43\x1a\xaa\xcd\x79\x47\xe2\xac\x13\xaf\x70\x60\x95\xa2\x37\xf8\x06\x00\x00\xff\xff\xab\x04\x27\x53\x6e\x00\x00\x00"

func dataHumansTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHumansTxt,
		"data/humans.txt",
	)
}

func dataHumansTxt() (*asset, error) {
	bytes, err := dataHumansTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/humans.txt", size: 110, mode: os.FileMode(420), modTime: time.Unix(1522301535, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x5b\x53\xe3\x38\x16\x7e\xef\x5f\x71\xd6\xdd\x35\x2f\x8b\x6d\x6e\x33\x34\xe0\xb8\x2a\x03\x33\x40\x5f\x68\x96\x64\x7a\xba\xf7\x65\x4b\x96\x4e\x62\x11\x59\xc7\x2d\xc9\xb9\x2c\xc5\x7f\xdf\x92\x9c\x84\x04\xc2\x2c\xec\x6c\xcd\x56\xcd\xc2\x43\x2c\x59\xe7\xf6\xe9\x9c\x4f\x47\xce\xfe\x72\xfa\xe9\xa4\xff\xf5\xea\x27\x28\x5d\xa5\xf2\x57\x99\xff\x01\xc5\xf4\xb0\x13\xa1\x8e\xf2\x57\x00\x59\x89\x4c\xf8\x07\x80\xac\x42\xc7\x80\x97\xcc\x58\x74\x9d\xa8\x71\x83\xf8\x6d\x94\xce\xdf\x29\xa9\x47\x60\x50\x75\x22\xd6\xb8\x92\x4c\x04\xa5\xc1\x41\x27\x4a\xcb\xa6\x62\xda\x26\x6e\xea\x22\x48\x57\x15\x69\x56\x61\x27\x12\x68\xb9\x91\xb5\x93\xa4\x23\xe0\xa4\x1d\x6a\xd7\x89\xba\x57\x17\x30\x20\x03\xa7\x97\x3d\x50\x44\xa3\xa6\xb6\x1b\xa5\x47\x38\x9b\x90\x11\x76\x45\x54\x68\xbb\x05\x37\x96\xf4\x16\xb0\x5a\xde\x4b\x39\xe9\x14\xe6\xb7\xb7\xc9\x39\x59\xe7\xa5\xef\xee\x20\x86\xae\x06\xd2\x4a\x6a\x5c\x31\x05\x16\xcd\x58\x72\xcc\xd2\x56\xe6\x91\xd5\xb1\xc4\x49\x4d\xc6\xad\x58\x9d\x48\xe1\xca\x8e\x40\x2f\x17\x87\xc1\x16\x48\x2d\x9d\x64\x2a\xb6\x9c\x29\xec\xec\x44\xab\x48\xb5\xe0\x94\xce\xd5\xf6\x28\x4d\x2b\x36\xe5\x42\x27\x05\x91\xb3\xce\xb0\xda\x0f\x38\x55\xe9\x72\x22\xdd\x4b\xf6\x92\x83\x94\x5b\x7b\x3f\x97\x54\x52\x27\xdc\xda\xa8\x85\xdd\xba\x99\x42\x5b\x22\xba\x08\xa4\x76\x38\x34\xd2\xcd\x3a\x91\x2d\xd9\xde\xdb\xfd\xf8\xc7\xcf\x5f\xa5\xec\x5d\xfc\x8c\xef\x77\xc4\x59\xf5\xee\xba\x3b\x9a\xf1\xe6\xbc\x7b\x7e\x3d\xdc\xdb\xfd\x54\xfd\xc2\x27\x93\x03\xd2\x7b\xd7\x5f\xc5\x70\xff\x33\xfb\xeb\x55\xd5\xeb\xdb\x7f\xa6\xef\x7f\x78\x3b\x2e\xc4\x4f\x37\xe5\x7e\x13\x01\x37\x64\x2d\x19\x39\x94\xba\x13\x31\x4d\x7a\x56\x51\x63\x17\x41\xb5\x9b\x08\xd6\xf0\x4e\x94\xa6\x9c\x04\x26\x37\xdf\x1a\x34\xb3\x10\x47\xfb\x18\xef\x24\x3b\xbb\xc9\x7e\xf0\xfb\xc6\x46\x79\x96\xb6\x52\x1b\x54\xbc\x14\x98\x9b\x87\xb8\xdc\xd8\x4d\x28\xf4\xf9\xf7\x17\x7f\x93\xc5\xf6\xee\xc1\xb7\xf1\xec\xa6\xf7\x71\x70\x7e\xf3\xe9\x23\xfb\x30\x1a\x34\xbf\x7e\x9e\xfe\x7d\xfa\xcb\x95\x3e\x79\xd7\x3d\x50\xbb\xd5\xc9\xaf\x97\x17\xf5\xd9\x61\x75\x76\x72\xfa\x76\x72\x76\x79\xc1\xaf\x4e\x0f\xfa\x53\xf6\x34\x0a\x0f\x63\xf1\x9b\x01\x6e\x56\x63\x27\x72\x38\x75\x7e\xe7\xe6\x50\x85\x52\x83\xdb\xf6\x19\xa0\x60\x7c\x34\x34\xd4\x68\x11\x73\x52\x64\x8e\x5e\x0f\x0e\xfd\xff\x71\xbb\xe0\xae\xfd\x49\xac\xc3\x31\xc6\x03\x22\x87\xe6\x5e\xb8\x66\x42\x48\x3d\x3c\x82\xfd\xed\x7a\x0a\xdb\xc7\x8b\xf9\x56\x13\xbc\x3e\x3c\x3c\x3c\x7e\xd2\x10\xac\x5b\x02\x28\xc8\x08\x34\xb1\xa3\xfa\x08\x76\xeb\x29\x58\x52\x52\xc0\x6b\x3c\xf4\xff\xbf\xe5\x4f\xa2\xd9\x38\xf6\x3c\xb1\xea\xdb\xdc\x48\xa1\x18\x1f\x2d\x4d\x0c\x48\xbb\x78\x82\x72\x58\xba\x23\x28\x48\x89\x35\xb5\x59\x1a\x70\x0b\xb4\x93\x2e\x78\x27\x2b\x48\xcc\xe6\xb0\x6a\x36\x06\xae\x98\xb5\xd0\x81\x48\xb3\x71\xc1\x0c\xb4\x3f\xb1\xd4\x63\x34\x16\x17\x43\x81\x03\xd6\x28\x17\x81\x21\x85\xf3\xd5\x72\xc8\x5a\x9a\x09\x56\x3a\xd1\x1c\xbd\x58\xe1\xc0\x1d\x7d\xbf\x5d\x4f\x8f\x17\x80\xc6\x26\x78\x18\xe6\x16\xdb\x06\x99\x90\x73\xeb\x9d\xb9\xed\x79\xcc\xcb\x15\x9e\x2d\x77\xf2\x8c\x2d\xa8\x2f\x5a\xa7\x9b\x2c\x65\x39\xc4\x90\xd9\x8a\x29\x95\xff\x16\xf3\x24\x59\xda\x2e\xca\xd2\x72\x67\x69\x3f\x15\x72\x3c\x07\x22\xd5\x6c\xf1\xb8\xe2\x95\x67\x23\x26\xf5\x8a\x47\xde\x1f\xaf\xfe\x43\xab\xbe\xb7\x20\xb6\x15\xad\x9b\xe4\xe3\x81\x6a\xa4\x58\x8d\x6b\x65\x95\xa1\xc9\xca\x9b\x87\x1a\x54\x6c\xab\x78\xc7\xef\x7e\x5c\x89\x78\x67\x7d\xe5\x7d\x04\x4f\x8b\xde\xcb\xae\x0b\x03\x64\x75\xde\x2f\xa5\x5d\x80\x04\x4c\x29\x9a\x58\x98\x51\x03\x8e\xa0\x46\x33\x20\x53\x79\x34\xe3\xf9\x91\x01\x63\xc9\xc0\xca\xaa\x56\x08\xe7\xfd\xfe\x15\x18\xfc\xd6\xa0\x75\x76\x0b\x0c\x72\x94\x63\xa9\x87\x5e\xdc\x80\x41\xdb\x28\x67\x43\x91\x00\xb3\xf0\xae\xf7\xe9\x32\x46\xed\x79\x4c\x00\x15\x37\xc8\x9d\x4d\xb2\xb4\xde\xe0\x10\x42\x45\xd6\x41\xc1\xac\xe4\xd0\x58\x36\x44\xc0\x29\x0b\x36\x27\xd4\x28\x11\xb6\x16\x94\x1c\x21\xb8\x52\xda\xa3\x07\x5a\x1e\x60\xf2\x70\xf8\x1f\xe2\xbe\xfb\x7b\x70\xdf\x7e\x8c\x7b\xe6\x91\x58\x9f\xf5\x7f\x6f\x80\x37\x46\xc1\x82\xad\xd7\xb2\x3d\x7d\xe3\xe9\x2f\x7d\x53\x92\x75\xeb\xea\xc2\xf1\x90\xff\x21\x38\xfc\xd7\xf3\x8f\x40\x48\xcb\x69\x8c\x06\x26\xa5\xe4\x25\xf8\xf0\x2c\x94\x4c\x0b\x85\x80\x15\x93\x2a\x34\x2e\xae\x44\x68\x41\x1b\xfa\x39\x7f\x68\xcd\xe3\x06\x41\x15\x93\x3a\xa4\x2d\x0f\x09\x52\xb1\x90\x1b\x08\x03\xf2\x19\xed\x93\x72\x9e\xa8\x7f\xc6\x64\x59\xd2\xe3\xe6\xac\xf9\xf8\x25\x5d\x22\x16\xe5\xff\x7e\x8d\x27\xd5\x3f\x4d\x7a\x5d\x5c\x8d\x7f\x58\xf4\xbb\x30\x21\x33\xf2\x54\xc2\x9d\x9a\x79\x4e\xf2\x09\xd3\x32\x0a\x4e\x6b\xe4\x6e\xcb\x4f\x0a\x42\x1b\x72\x67\x7e\x80\xd0\x00\xfa\x5f\xfa\x4b\x3e\x73\x44\xff\x87\x39\xd4\xed\x76\xbb\xa9\xd0\x36\x66\xb5\x4c\xc8\x0c\x9f\xca\xa3\x87\xeb\x9e\x99\x4b\xbf\xdf\xc1\xfe\x97\x7e\x1a\x3a\xa8\x64\x20\x9f\x72\x6e\x75\xcd\xcb\x92\x7c\x65\xe6\xf6\x56\x0e\x20\xb9\x46\x21\xed\xdd\xdd\xea\xca\x72\x2f\xbf\x66\x0e\xe3\x0f\xb2\x92\xce\x33\xce\x77\xac\xaa\x8f\xa1\x5b\x34\x16\xe3\x2b\x43\x0e\xb9\xef\x95\xb2\xb4\xdc\x7b\x6a\x1f\x1f\xa6\xc7\x4b\x4a\x65\x43\x8a\xbc\xb4\x5c\xc2\x2e\x9c\x28\x89\xda\x59\x60\x06\x41\xf9\x50\x50\xf8\x5e\x60\x77\x7b\x7b\x59\x46\x35\x1a\x28\xa9\x31\x5b\xc0\xb4\x00\x3e\x17\x98\x94\x14\x84\x58\xd1\x58\x39\x46\x20\x03\xe4\x4a\x34\x13\x69\x11\x86\x06\x51\xcc\x60\x22\x95\x82\x02\xa1\x50\xc4\x47\x28\x60\x22\x5d\x09\x9a\x40\x93\x6b\x7b\xb4\x7a\x83\x47\x17\x83\x50\xa8\x59\x91\x1b\x54\xb3\x2c\x2d\x72\x68\x6a\xd2\xe1\xec\x5f\x76\x2e\xae\x64\xed\x01\x60\xcb\x50\xd0\x9c\xb4\x95\xbe\x7b\x7e\x94\x37\x43\xe9\xca\xa6\x08\x77\x1e\x3b\x9a\x2e\x92\x35\x1e\x52\x94\x4b\x6d\x1d\x53\x6a\xd9\xc3\xd0\x44\x43\x98\xd3\xbe\xc3\x63\x79\xe0\x87\x60\x56\x5a\xef\x8f\x26\x17\xdc\x61\xc0\xa9\xaa\xd0\x70\xc9\xd4\xd2\xa3\x10\x1b\xd3\x33\x18\x36\xcc\x30\xed\x10\x3d\x95\xb0\x31\x93\x8a\x15\x52\x49\x37\xf3\x3d\x93\x92\xcb\x01\x19\x60\x9c\x37\x86\xf1\xd9\x13\x48\x84\x5e\x6d\xee\x64\x68\xbc\xbd\x1f\xa6\xd1\xda\x7b\xdc\x96\xcf\x7d\x38\x70\x7b\x9b\x7c\x46\x63\x25\x69\xdf\x28\x87\xb7\x1b\x1a\xae\x47\xbc\xb2\x3e\x71\x7b\x8b\x5a\xdc\xdd\xbd\xda\xcc\x6e\x6b\x0d\xf4\xfd\x63\x9d\x7f\xa7\x0b\x5b\x1f\x7b\x6b\xcf\x1c\xb4\x82\xf3\xdb\x8f\x14\x9d\xa8\x7d\x8c\x16\xd9\xbb\x7a\x3b\xda\x78\x7f\x78\xdc\xa9\x3f\x4e\xff\x4a\xc4\x7b\xd1\xb3\x88\x7a\xc3\x6a\x80\xac\x51\x2b\xb7\x15\x78\x58\x7e\x4a\xae\xbc\x5d\x5e\x64\xae\x51\x31\x5f\x43\xf3\x8b\x82\xcd\x52\x25\x1f\x09\xe6\x8f\xb2\x54\x94\xbc\x4e\x24\xa5\x51\xfe\x33\xb3\x2e\x14\xda\x75\x48\x16\x85\x70\x3a\xd3\xac\x92\x3c\x3e\xbd\xec\x6d\xa0\xb1\xe7\xa9\x9f\x53\xb4\xaf\x82\x28\x3f\x93\x2e\x2e\x98\x45\x11\x5a\x7d\xcf\x98\x52\x6f\xa2\xee\x75\xd5\x59\xda\xa8\x3f\x18\xcc\x6e\xf8\x10\x06\x1f\xa4\x1e\x3d\x17\xc8\x42\xd1\x30\x59\xb0\x7e\x1a\xe5\x3f\x2a\x0a\xa1\x3d\x53\xdc\x4d\xa4\x73\x68\x02\x50\x3d\x47\x0a\xf5\x3f\x7a\xd4\x28\x1b\xe5\xfd\xf6\xcd\x26\x5d\xff\x03\x64\x4e\xa8\x9e\x85\x2b\xf6\x33\xe3\x6a\x11\x19\x61\x55\x87\x03\xb3\xe7\x87\xf0\x1e\xab\xfa\x85\xf1\xac\x31\x40\x5b\x9e\xed\xc7\x86\xf6\x1b\x43\x96\xb6\x9f\x41\xff\x15\x00\x00\xff\xff\x07\x84\xc8\xb3\x17\x15\x00\x00"

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 5399, mode: os.FileMode(420), modTime: time.Unix(1522314990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataRobotsTxt = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x2d\x4e\x2d\xd2\x4d\x4c\x4f\xcd\x2b\xb1\x52\xd0\xe2\x72\x2e\x4a\x2c\xcf\xd1\x4d\x49\xcd\x49\xac\xb4\x52\x30\x34\xe0\x72\xc9\x2c\x4e\xcc\xc9\xc9\x2f\xb7\x52\xd0\x4f\x4e\xcf\xd4\x4d\xca\xcc\xd3\xd7\xc2\x26\xc8\x05\x08\x00\x00\xff\xff\xab\x8f\x53\x86\x47\x00\x00\x00"

func dataRobotsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataRobotsTxt,
		"data/robots.txt",
	)
}

func dataRobotsTxt() (*asset, error) {
	bytes, err := dataRobotsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/robots.txt", size: 71, mode: os.FileMode(420), modTime: time.Unix(1522301535, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/favicon.ico": dataFaviconIco,
	"data/humans.txt":  dataHumansTxt,
	"data/index.html":  dataIndexHtml,
	"data/robots.txt":  dataRobotsTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{dataFaviconIco, map[string]*bintree{}},
		"humans.txt":  &bintree{dataHumansTxt, map[string]*bintree{}},
		"index.html":  &bintree{dataIndexHtml, map[string]*bintree{}},
		"robots.txt":  &bintree{dataRobotsTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
